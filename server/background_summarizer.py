import threading
import time

from openai import OpenAI
from config import OPENAI_MODEL, OPENAI_API_KEY
from logger_config import get_logger

logger = get_logger(__name__)

class MemoryBackgroundSummarizer:
    def __init__(self, memory_manager, api_key=OPENAI_API_KEY, model=OPENAI_MODEL, interval_sec=30):
        logger.info("MemoryBackgroundSummarizer Initialized")
        self.memory_manager = memory_manager
        self.client = OpenAI(api_key=api_key)
        self.model = model
        self.interval_sec = interval_sec
        self._stop_event = threading.Event()
        self._thread = threading.Thread(target=self._run_loop, daemon=True)

    def test_check(self):
        logger.info("Enter test_check->start")
    def start(self):
        logger.info("Enter MemoryBackgroundSummarizer->start")
        if not self._thread.is_alive():
            logger.info("üöÄ Memory summarizer started.")
            self._thread.start()

    def stop(self):
        self._stop_event.set()
        self._thread.join()
        logger.info("üõë Memory summarizer stopped.")

    def run_once(self):
        logger.debug("Enter MemoryBackgroundSummarizer->run_once")
        unprocessed = self.memory_manager.get_unsummarized(limit=5)
        if not unprocessed:
            return

        logger.debug(f"unprocessed = {unprocessed}")
        # ‚úÖ ‡πÉ‡∏ä‡πâ dict access ‡πÅ‡∏ó‡∏ô index
        text = "\n".join(f"{row['role']}: {row['content']}" for row in reversed(unprocessed))

        prompt = (
            "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏Ñ‡∏á‡∏™‡∏≤‡∏£‡∏∞‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏ß‡πâ\n"
            "‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:\n"
            f"{text}\n"
            "\n‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î"
        )

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.4,
            )
            summary = response.choices[0].message.content.strip()
            self.memory_manager.add_summary(summary)
            # ‚úÖ Mark the processed ones as summarized
            ids = [row["id"] for row in unprocessed]
            self.memory_manager.mark_as_summarized(ids)
            logger.debug(f"summary={summary}")
            logger.debug("üìù Memory summarized.")
        except Exception as e:
            logger.error(f"‚ùå Failed to summarize memory: {e}")
    
    def _run_loop(self):
        logger.debug("üîÅ Loop started.")
        while not self._stop_event.is_set():
            logger.debug("üí§ Waiting for next round...")
            try:
                self.run_once()
            except Exception as e:
                logger.error(f"‚ùå Error: {e}")
            self._stop_event.wait(self.interval_sec)
        logger.debug("‚úÖ Loop exited cleanly.")
    
class HistoryBackgroundSummarizer:
    def __init__(self, memory_manager, api_key=OPENAI_API_KEY, model=OPENAI_MODEL, interval_sec=60):
        logger.info("MemoryBackgroundSummarizer Initialized")
        self.memory_manager = memory_manager
        self.client = OpenAI(api_key=api_key)
        self.model = model
        self.interval_sec = interval_sec
        self._stop_event = threading.Event()
        self._thread = threading.Thread(target=self._run_loop, daemon=True)

    def start(self):
        if not self._thread.is_alive():
            logger.info("üöÄ History summarizer started.")
            self._thread.start()

    def stop(self):
        self._stop_event.set()
        self._thread.join()
        logger.info("üõë History summarizer stopped.")

    def _run_loop(self):
        logger.debug("üîÅ Loop started.")
        while not self._stop_event.is_set():
            logger.debug("üí§ Waiting for next round...")
            try:
                self.run_once()
            except Exception as e:
                logger.error(f"‚ùå Error: {e}")
            self._stop_event.wait(self.interval_sec)
        logger.debug("‚úÖ Loop exited cleanly.")

    def run_once(self):
        logger.debug("Enter HistoryBackgroundSummarizer->run_once")
        unprocessed = self.memory_manager.get_unsummarized_history(limit=5)
        if not unprocessed:
            return

        logger.debug(f"(HistoryBackgroundSummarizer) unprocessed = {unprocessed}")
        text = "\n".join(f"{role}: {content}" for role, content in reversed(unprocessed))

        prompt = (
            "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏ß‡πâ\n"
            "‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:\n"
            f"{text}\n"
            "\n‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î"
        )

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI"},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.4,
            )
            summary = response.choices[0].message.content.strip()
            self.memory_manager.add_history_summary(summary)
            # ‚úÖ Mark the processed ones as summarized
            ids = [row["id"] for row in unprocessed]
            self.memory_manager.mark_as_summarized(ids)
            
            logger.debug(f"üìù History summarized. : {summary}")
        except Exception as e:
            logger.error(f"‚ùå Failed to summarize history: {e}")
